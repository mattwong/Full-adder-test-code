module mojofpga (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    
    output out[3],
    input sum,
    input carry
  ) {
  
  sig rst;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner btn_cond;
    edge_detector edge_dt(#RISE(1),#FALL(0));
    .rst(rst) {
      fsm state = {IDLE, S000, S001, S010, S100, S110, S101, S011, S111, PASS, FAIL};
    }
    dff counter[26];
  }

  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    led = 8h00;               // connect buttons to LEDs
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    btn_cond.in=io_button[4];
    edge_dt.in=btn_cond.out;
    
    io_led[2][0] = carry;
    io_led[2][1] = sum;
    out[2:0] = io_dip[2][2:0];
    
    if ((io_dip[2][2] ^ io_dip[2][1] ^ io_dip[2][0]) == sum){
      io_led[2][7]=1
    }
    if (((io_dip[2][2]&io_dip[2][1]) | (io_dip[2][2]&io_dip[2][0]) | (io_dip[2][1]&io_dip[2][0])) == carry){
      io_led[2][6]=1
    }
    
  }
}

